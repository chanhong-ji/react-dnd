{"version":3,"sources":["atoms.tsx","components/DraggableCard.tsx","components/Board.tsx","components/CategorySelector.tsx","App.tsx","index.tsx","theme.ts"],"names":["todosState","atom","key","default","JSON","parse","localStorage","getItem","stringify","Doing","Done","boardState","Card","styled","div","props","isDragging","theme","green","Svg","svg","DraggableCard","todoText","todoId","index","boardId","setTodoBoards","useSetRecoilState","onDelete","allBoards","targetBoard","splice","draggableId","provided","info","ref","innerRef","draggableProps","dragHandleProps","focusable","role","xmlns","viewBox","className","onClick","fill","d","React","memo","Container","pink","Title","h2","Area","isDraggingOver","isDraggingFromThis","Form","form","Board","todos","setTodos","useForm","register","handleSubmit","setValue","onValid","todo","newTodo","id","Date","now","text","prevBoards","onSubmit","required","placeholder","droppableId","type","droppableProps","Boolean","draggingFromThisWith","map","Wrapper","CategoryBtn","btnClicked","CategoryForm","CategorySelector","useRecoilState","todoBoards","setBoards","errors","formState","setError","useState","setBtnClicked","toggleClicked","prev","category","message","shouldFocus","onCategorySubmit","minLength","Boards","Trash","App","boards","useEffect","setItem","onDragEnd","source","destination","copiedBoards","filter","board","movedBoard","copiedBoard","targetTodo","fromBoard","toBoard","direction","style","display","GlobalStyle","createGlobalStyle","purple","ReactDOM","render","StrictMode","bgColor","boardColor","cardColor","orange","blue","yellow","white","document","getElementById"],"mappings":"qOAiBaA,EAAaC,YAAa,CACrCC,IAAK,QACLC,QAASC,KAAKC,MACZC,aAAaC,QAAQ,eAAiBH,KAAKI,UAlB1B,CACnB,QAAS,GACTC,MAAO,GACPC,KAAM,QAmBKC,EAAaV,YAAe,CACvCC,IAAK,aACLC,QAASC,KAAKC,MACZC,aAAaC,QAAQ,WAAaH,KAAKI,UAAU,CAAC,QAAS,QAAS,Y,eCrBlEI,EAAOC,IAAOC,IAAV,+QAQM,SAACC,GAAD,OACZA,EAAMC,WAAa,kCAAoC,UACrC,SAACD,GAAD,OAClBA,EAAMC,WAAaD,EAAME,MAAMC,SAI7BC,EAAMN,IAAOO,IAAV,oIAgBHC,EAAgB,SAAC,GAKA,IAJrBC,EAIoB,EAJpBA,SACAC,EAGoB,EAHpBA,OACAC,EAEoB,EAFpBA,MACAC,EACoB,EADpBA,QAEMC,EAAgBC,YAAkB3B,GAExC,SAAS4B,IACPF,GAAc,SAACG,GACb,IAAMC,EAAW,YAAOD,EAAUJ,IAElC,OADAK,EAAYC,OAAOP,EAAO,GACnB,2BAAKK,GAAZ,kBAAwBJ,EAAUK,OAItC,OACE,cAAC,IAAD,CAAWN,MAAOA,EAAOQ,YAAaT,EAAS,GAA/C,SACG,SAACU,EAAUC,GACV,OACE,eAACtB,EAAD,qCACEuB,IAAKF,EAASG,UACVH,EAASI,gBACTJ,EAASK,iBAHf,IAIEtB,WAAYkB,EAAKlB,WAJnB,UAMGM,EACD,cAACH,EAAD,CACE,cAAY,OACZoB,UAAU,QACV,cAAY,MACZ,YAAU,QACVC,KAAK,MACLC,MAAM,6BACNC,QAAQ,cACRC,UAAU,wCACVC,QAAShB,EATX,SAWE,sBACEiB,KAAK,eACLC,EAAE,yPAUHC,MAAMC,KAAK3B,GC/EpB4B,EAAYpC,IAAOC,IAAV,yOAQO,SAACC,GAAD,OAAWA,EAAME,MAAMiC,QAChC,SAACnC,GAAD,OAAYA,EAAMC,WAAa,GAAM,KAG5CmC,EAAQtC,IAAOuC,GAAV,+NAOW,SAACrC,GAAD,OAClBA,EAAMC,WAAa,qBAAuB,iBACnC,SAACD,GAAD,OAAYA,EAAMC,WAAa,QAAU,aAG9CqC,EAAOxC,IAAOC,IAAV,2IACY,SAACC,GAAD,OAClBA,EAAMuC,eACF,UACAvC,EAAMwC,mBACN,UACA,iBAMFC,EAAO3C,IAAO4C,KAAV,ytBAiDJC,EAAQ,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOlC,EAAkC,EAAlCA,QAASD,EAAyB,EAAzBA,MACzBoC,EAAWjC,YAAkB3B,GACnC,EAA6C6D,cAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,SAEhC,SAASC,EAAT,GAAmC,IAAhBC,EAAe,EAAfA,KACXC,EAAU,CACdC,GAAIC,KAAKC,MACTC,KAAML,GAERN,GAAS,SAACY,GACR,OAAO,2BACFA,GADL,kBAEG/C,EAFH,sBAEiB+C,EAAW/C,IAF5B,CAEsC0C,SAGxCH,EAAS,OAAQ,IAGnB,OACE,cAAC,IAAD,CAAWhC,YAAaP,EAASD,MAAOA,EAAxC,SACG,SAACS,EAAUC,GAAX,OACC,eAACe,EAAD,yBACEd,IAAKF,EAASG,UACVH,EAASI,gBAFf,IAGErB,WAAYkB,EAAKlB,WAHnB,UAKE,cAACmC,EAAD,2BAAWlB,EAASK,iBAApB,IAAqCtB,WAAYkB,EAAKlB,WAAtD,SACGS,KAEH,eAAC+B,EAAD,CAAMiB,SAAUV,EAAaE,GAA7B,UACE,iDACMH,EAAS,OAAQ,CAAEY,SAAU,cADnC,IAEEC,YAAY,mBAEd,+CAEF,cAAC,IAAD,CAAWC,YAAanD,EAASoD,KAAK,OAAtC,SACG,SAAC5C,EAAUC,GAAX,OACC,eAACmB,EAAD,yBACElB,IAAKF,EAASG,UACVH,EAAS6C,gBAFf,IAGExB,eAAgBpB,EAAKoB,eACrBC,mBAAoBwB,QAAQ7C,EAAK8C,sBAJnC,UAMGrB,EAAMsB,KAAI,SAACf,EAAM1C,GAAP,OACT,cAAC,EAAD,CACEF,SAAU4C,EAAKK,KACfhD,OAAQ2C,EAAKE,GACb5C,MAAOA,EAEPC,QAASA,GADJyC,EAAKE,OAIbnC,EAAS0C,2BAUX5B,MAAMC,KAAKU,GCtJpBwB,EAAUrE,IAAOC,IAAV,kGAOPqE,EAActE,IAAOC,IAAV,0SAKK,SAACC,GAAD,OAAWA,EAAME,MAAMC,SAGhC,SAACH,GAAD,OAAYA,EAAMqE,WAAa,EAAI,MAS1CC,EAAexE,IAAO4C,KAAV,2bAEL,SAAC1C,GAAD,OAAYA,EAAMqE,WAAa,OAAS,UAuEtCE,I,QAAAA,EAlDf,WAA6B,IAAD,EAC1B,EAAoCC,YAAevF,GAAnD,mBAAOwF,EAAP,KAAmB9D,EAAnB,KACM+D,EAAY9D,YAAkBhB,GACpC,EAMIkD,cALFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,SACa0B,EAJf,EAIEC,UAAaD,OACbE,EALF,EAKEA,SAGF,EAAoCC,oBAAS,GAA7C,mBAAOT,EAAP,KAAmBU,EAAnB,KAEMC,EAAgB,WACpBD,GAAc,SAACE,GAAD,OAAWA,MAc3B,OACE,eAACd,EAAD,WACE,cAACC,EAAD,CAAavC,QAASmD,EAAeX,WAAYA,EAAjD,0BAGA,eAACC,EAAD,CACED,WAAYA,EACZX,SAAUV,GAAa,mBAlB7B,SAA0BkC,GACpBA,KAAYT,EACdI,EAAS,WAAY,CAAEM,QAAS,iBAAmB,CAAEC,aAAa,KAGpEzE,GAAc,SAAC8C,GAAD,mBAAC,eAAqBA,GAAtB,kBAAmCyB,EAAW,QAC5DR,GAAU,SAACjB,GAAD,4BAAoBA,GAApB,CAAgCyB,OAC1CjC,EAAS,WAAY,IACrB+B,KAU6CK,CAAlB,EAAGH,aAF5B,UAIE,iDACMnC,EAAS,WAAY,CACvBY,UAAU,EACV2B,UAAW,KAHf,IAKE1B,YAAY,mBAEd,sCAAOe,QAAP,IAAOA,GAAP,UAAOA,EAAQO,gBAAf,aAAO,EAAkBC,iBCzF3BjD,EAAYpC,IAAOC,IAAV,6NAWTwF,EAASzF,IAAOC,IAAV,wLAUNyF,EAAQ1F,IAAOC,IAAV,+IAME,SAACC,GAAD,OACPA,EAAMuC,eAAiB,QAAU,wBAIjCnC,EAAMN,IAAOO,IAAV,6DAwHMoF,I,EAAAA,EAnHf,WACE,MAAoCjB,YAAevF,GAAnD,mBAAOwF,EAAP,KAAmB9D,EAAnB,KACA,EAA4B6D,YAAe5E,GAA3C,mBAAO8F,EAAP,KAAehB,EAAf,KA2DA,OARAiB,qBAAU,WACRpG,aAAaqG,QAAQ,aAAcvG,KAAKI,UAAUgF,MACjD,CAACA,IAEJkB,qBAAU,WACRpG,aAAaqG,QAAQ,SAAUvG,KAAKI,UAAUiG,MAC7C,CAACA,IAGF,cAAC,IAAD,CAAiBG,UA1DnB,YAA+D,IAA1CC,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,YAAajC,EAAoB,EAApBA,KACnCiC,IAGQ,UAATjC,EAC8B,UAA5BiC,EAAYlC,aACdlD,GAAc,SAAC8C,GACb,IAAMuC,EAAY,eAAQvC,GAE1B,cADOuC,EAAaN,EAAOI,EAAOrF,QAC3BuF,KAETtB,GAAU,SAACO,GACT,OAAOA,EAAKgB,QAAO,SAACC,GAAD,OAAWA,IAAUjB,EAAKa,EAAOrF,cAGtDiE,GAAU,SAACgB,GACT,IAAMM,EAAY,YAAON,GACnBS,EAAaH,EAAahF,OAAO8E,EAAOrF,MAAO,GAErD,OADAuF,EAAahF,OAAO+E,EAAYtF,MAAO,EAAG0F,EAAW,IAC9CH,KAIPF,EAAOjC,eAAP,OAAuBkC,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAalC,aACtClD,GAAc,SAACG,GACb,IAAMsF,EAAW,YAAOtF,EAAUgF,EAAOjC,cACnCwC,EAAaD,EAAYpF,OAAO8E,EAAOrF,MAAO,GAEpD,OADA2F,EAAYpF,OAAO+E,EAAYtF,MAAO,EAAG4F,EAAW,IAC7C,2BACFvF,GADL,kBAEGgF,EAAOjC,YAAcuC,OAI1BzF,GAAc,SAACG,GAAe,IAAD,EACrBwF,EAAS,YAAOxF,EAAUgF,EAAOjC,cACjC0C,EAAO,YAAOzF,EAAUiF,EAAYlC,cACpCwC,EAAaC,EAAUtF,OAAO8E,EAAOrF,MAAO,GAElD,OADA8F,EAAQvF,OAAR,OAAe+E,QAAf,IAAeA,OAAf,EAAeA,EAAatF,MAAO,EAAG4F,EAAW,IAC1C,2BACFvF,GADL,uBAEGgF,EAAOjC,YAAcyC,GAFxB,cAGGP,EAAYlC,YAAc0C,GAH7B,SAmBN,SACE,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAW1C,YAAY,SAAS2C,UAAU,aAAa1C,KAAK,QAA5D,SACG,SAAC5C,EAAUC,GACV,OACE,eAACoE,EAAD,yBAAQnE,IAAKF,EAASG,UAAcH,EAAS6C,gBAA7C,cACG2B,EAAOxB,KAAI,SAACxD,EAASD,GAAV,OACV,cAAC,EAAD,CACEC,QAASA,EACTkC,MAAO6B,EAAW/D,GAElBD,MAAOA,GADFC,MAIRQ,EAAS0C,mBAKlB,cAAC,IAAD,CAAWC,YAAY,QAAQC,KAAK,QAApC,SACG,SAAC5C,EAAUC,GACV,OACE,eAACqE,EAAD,yBACEpE,IAAKF,EAASG,UACVH,EAAS6C,gBAFf,IAGExB,eAAgBpB,EAAKoB,eAHvB,UAKE,cAAC,EAAD,CACE,cAAY,OACZf,UAAU,QACV,cAAY,MACZ,YAAU,QACVC,KAAK,MACLC,MAAM,6BACNC,QAAQ,cACRC,UAAU,wCARZ,SAUE,sBACEE,KAAK,eACLC,EAAE,iPAGN,qBAAK0E,MAAO,CAAEC,QAAS,QAAvB,SAAkCxF,EAAS0C,2BC9IrD+C,EAAcC,YAAH,i0CAoDI,SAAC5G,GAAD,OAAWA,EAAME,MAAM2G,UAU5CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAe9G,MCvEkB,CACrC+G,QAAS,QACTC,WAAY,UACZC,UAAW,UACXC,OAAQ,UACRjF,KAAM,UACNkF,KAAM,UACNC,OAAQ,UACRC,MAAO,UACPpH,MAAO,UACP0G,OAAQ,WD6DJ,UACE,cAACF,EAAD,IACA,cAAC,EAAD,WAINa,SAASC,eAAe,W","file":"static/js/main.0004b40a.chunk.js","sourcesContent":["import { atom } from \"recoil\";\r\n\r\nconst defaultBoard = {\r\n  \"To Do\": [],\r\n  Doing: [],\r\n  Done: [],\r\n};\r\n\r\nexport interface ITodo {\r\n  id: number;\r\n  text: string;\r\n}\r\n\r\ninterface ITodos {\r\n  [key: string]: ITodo[];\r\n}\r\n\r\nexport const todosState = atom<ITodos>({\r\n  key: \"todos\",\r\n  default: JSON.parse(\r\n    localStorage.getItem(\"todoBoards\") || JSON.stringify(defaultBoard)\r\n  ),\r\n});\r\n\r\nexport const boardState = atom<string[]>({\r\n  key: \"boardState\",\r\n  default: JSON.parse(\r\n    localStorage.getItem(\"boards\") || JSON.stringify([\"To Do\", \"Doing\", \"Done\"])\r\n  ),\r\n});\r\n","import React from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { todosState } from \"../atoms\";\r\n\r\nconst Card = styled.div<{ isDragging: boolean }>`\r\n  font-family: \"DM Sans\", sans-serif;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-radius: 5px;\r\n  margin-bottom: 5px;\r\n  padding: 10px;\r\n  box-shadow: ${(props) =>\r\n    props.isDragging ? \"0px 2px 5px rgba(0, 0, 0, 0.05)\" : \"none\"};\r\n  background-color: ${(props) =>\r\n    props.isDragging ? props.theme.green : props.theme.green};\r\n  color: white;\r\n`;\r\n\r\nconst Svg = styled.svg`\r\n  width: 15px;\r\n  height: 15px;\r\n  color: rgba(0, 0, 0, 0.1);\r\n  :hover {\r\n    color: whitesmoke;\r\n  }\r\n`;\r\n\r\ninterface IDraggableCard {\r\n  todoText: string;\r\n  todoId: number;\r\n  index: number;\r\n  boardId: string;\r\n}\r\n\r\nconst DraggableCard = ({\r\n  todoText,\r\n  todoId,\r\n  index,\r\n  boardId,\r\n}: IDraggableCard) => {\r\n  const setTodoBoards = useSetRecoilState(todosState);\r\n\r\n  function onDelete() {\r\n    setTodoBoards((allBoards) => {\r\n      const targetBoard = [...allBoards[boardId]];\r\n      targetBoard.splice(index, 1);\r\n      return { ...allBoards, [boardId]: targetBoard };\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Draggable index={index} draggableId={todoId + \"\"}>\r\n      {(provided, info) => {\r\n        return (\r\n          <Card\r\n            ref={provided.innerRef}\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            isDragging={info.isDragging}\r\n          >\r\n            {todoText}\r\n            <Svg\r\n              aria-hidden=\"true\"\r\n              focusable=\"false\"\r\n              data-prefix=\"fas\"\r\n              data-icon=\"trash\"\r\n              role=\"img\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              viewBox=\"0 0 448 512\"\r\n              className=\"svg-inline--fa fa-trash fa-w-14 fa-3x\"\r\n              onClick={onDelete}\r\n            >\r\n              <path\r\n                fill=\"currentColor\"\r\n                d=\"M432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zM53.2 467a48 48 0 0 0 47.9 45h245.8a48 48 0 0 0 47.9-45L416 128H32z\"\r\n              ></path>\r\n            </Svg>\r\n          </Card>\r\n        );\r\n      }}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default React.memo(DraggableCard);\r\n","import React from \"react\";\r\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { ITodo, todosState } from \"../atoms\";\r\nimport DraggableCard from \"./DraggableCard\";\r\n\r\nconst Container = styled.div<{ isDragging: boolean }>`\r\n  width: 300px;\r\n  border-radius: 20px;\r\n  min-height: 500px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  border: 5px solid whitesmoke;\r\n  background-color: ${(props) => props.theme.pink};\r\n  opacity: ${(props) => (props.isDragging ? 0.7 : 1)};\r\n`;\r\n\r\nconst Title = styled.h2<{ isDragging: boolean }>`\r\n  font-family: \"Mochiy Pop P One\", sans-serif;\r\n  font-weight: 400;\r\n  text-align: center;\r\n  margin-bottom: 10px;\r\n  padding: 10px;\r\n  font-size: 18px;\r\n  background-color: ${(props) =>\r\n    props.isDragging ? \"rgba(0, 0, 0, 0.6)\" : \"transparent\"};\r\n  color: ${(props) => (props.isDragging ? \"white\" : \"inherit\")};\r\n`;\r\n\r\nconst Area = styled.div<IAreaProps>`\r\n  background-color: ${(props) =>\r\n    props.isDraggingOver\r\n      ? \"#dfe6e9\"\r\n      : props.isDraggingFromThis\r\n      ? \"#b2bec3\"\r\n      : \"transparent\"};\r\n  flex-grow: 1;\r\n  transition: background-color 0.3s ease-in-out;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  width: 100%;\r\n  display: flex;\r\n  padding: 0 20px;\r\n  position: relative;\r\n  input {\r\n    width: 100%;\r\n    height: 30px;\r\n    border: none;\r\n    background: none;\r\n    border-bottom: 3px solid whitesmoke;\r\n    text-align: center;\r\n    &:focus {\r\n      outline: none;\r\n      border-bottom: 3px solid grey;\r\n    }\r\n  }\r\n  button {\r\n    font-family: \"Mochiy Pop P One\", sans-serif;\r\n    background: none;\r\n    border: none;\r\n    background-color: rgba(0, 0, 0, 0.1);\r\n    position: absolute;\r\n    right: 20px;\r\n    bottom: 10px;\r\n    font-size: 7px;\r\n    padding: 5px;\r\n    border-radius: 10px;\r\n    color: rgba(0, 0, 0, 0.8);\r\n    &:active {\r\n      background-color: rgba(0, 0, 0, 0.3);\r\n    }\r\n  }\r\n`;\r\ninterface IBoardProps {\r\n  todos: ITodo[];\r\n  boardId: string;\r\n  index: number;\r\n}\r\n\r\ninterface IAreaProps {\r\n  isDraggingOver: boolean;\r\n  isDraggingFromThis: boolean;\r\n}\r\n\r\ninterface IForm {\r\n  todo: string;\r\n}\r\n\r\nconst Board = ({ todos, boardId, index }: IBoardProps) => {\r\n  const setTodos = useSetRecoilState(todosState);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n\r\n  function onValid({ todo }: IForm) {\r\n    const newTodo = {\r\n      id: Date.now(),\r\n      text: todo,\r\n    };\r\n    setTodos((prevBoards) => {\r\n      return {\r\n        ...prevBoards,\r\n        [boardId]: [...prevBoards[boardId], newTodo],\r\n      };\r\n    });\r\n    setValue(\"todo\", \"\");\r\n  }\r\n\r\n  return (\r\n    <Draggable draggableId={boardId} index={index}>\r\n      {(provided, info) => (\r\n        <Container\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          isDragging={info.isDragging}\r\n        >\r\n          <Title {...provided.dragHandleProps} isDragging={info.isDragging}>\r\n            {boardId}\r\n          </Title>\r\n          <Form onSubmit={handleSubmit(onValid)}>\r\n            <input\r\n              {...register(\"todo\", { required: \"Required\" })}\r\n              placeholder=\"Write Todo...\"\r\n            />\r\n            <button>Create</button>\r\n          </Form>\r\n          <Droppable droppableId={boardId} type=\"card\">\r\n            {(provided, info) => (\r\n              <Area\r\n                ref={provided.innerRef}\r\n                {...provided.droppableProps}\r\n                isDraggingOver={info.isDraggingOver}\r\n                isDraggingFromThis={Boolean(info.draggingFromThisWith)}\r\n              >\r\n                {todos.map((todo, index) => (\r\n                  <DraggableCard\r\n                    todoText={todo.text}\r\n                    todoId={todo.id}\r\n                    index={index}\r\n                    key={todo.id}\r\n                    boardId={boardId}\r\n                  />\r\n                ))}\r\n                {provided.placeholder}\r\n              </Area>\r\n            )}\r\n          </Droppable>\r\n        </Container>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default React.memo(Board);\r\n","import { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { boardState, todosState } from \"../atoms\";\r\n\r\nconst Wrapper = styled.div`\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n  display: flex;\r\n`;\r\n\r\nconst CategoryBtn = styled.div<{ btnClicked: boolean }>`\r\n  width: min-content;\r\n  height: min-content;\r\n  padding: 10px;\r\n  border-radius: 20px;\r\n  background-color: ${(props) => props.theme.green};\r\n  font-family: \"Mochiy Pop P One\", sans-serif;\r\n  color: white;\r\n  opacity: ${(props) => (props.btnClicked ? 1 : 0.5)};\r\n  &:hover {\r\n    opacity: 0.8;\r\n  }\r\n  &:active {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst CategoryForm = styled.form<{ btnClicked: boolean }>`\r\n  margin-left: 10px;\r\n  display: ${(props) => (props.btnClicked ? \"flex\" : \"none\")};\r\n  align-items: center;\r\n  width: 120px;\r\n  z-index: 1;\r\n  border-radius: 10px;\r\n  input {\r\n    font-family: \"Mochiy Pop P One\", sans-serif;\r\n    text-align: center;\r\n    width: 100%;\r\n    height: 50%;\r\n    background: none;\r\n    border: none;\r\n    border-bottom: 3px whitesmoke solid;\r\n    color: white;\r\n    font-size: 15px;\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n  }\r\n`;\r\n\r\nfunction CategorySelector() {\r\n  const [todoBoards, setTodoBoards] = useRecoilState(todosState);\r\n  const setBoards = useSetRecoilState(boardState);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setValue,\r\n    formState: { errors },\r\n    setError,\r\n  } = useForm();\r\n\r\n  const [btnClicked, setBtnClicked] = useState(false);\r\n\r\n  const toggleClicked = () => {\r\n    setBtnClicked((prev) => !prev);\r\n  };\r\n\r\n  function onCategorySubmit(category: string) {\r\n    if (category in todoBoards) {\r\n      setError(\"category\", { message: \"Already exist\" }, { shouldFocus: true });\r\n      return;\r\n    }\r\n    setTodoBoards((prevBoards) => ({ ...prevBoards, [category]: [] }));\r\n    setBoards((prevBoards) => [...prevBoards, category]);\r\n    setValue(\"category\", \"\");\r\n    toggleClicked();\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <CategoryBtn onClick={toggleClicked} btnClicked={btnClicked}>\r\n        New Category\r\n      </CategoryBtn>\r\n      <CategoryForm\r\n        btnClicked={btnClicked}\r\n        onSubmit={handleSubmit(({ category }) => onCategorySubmit(category))}\r\n      >\r\n        <input\r\n          {...register(\"category\", {\r\n            required: true,\r\n            minLength: 2,\r\n          })}\r\n          placeholder=\"Press Enter..\"\r\n        />\r\n        <span>{errors?.category?.message}</span>\r\n      </CategoryForm>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default CategorySelector;\r\n","import React, { useEffect } from \"react\";\nimport { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { boardState, todosState } from \"./atoms\";\nimport Board from \"./components/Board\";\nimport CategorySelector from \"./components/CategorySelector\";\n\nconst Container = styled.div`\n  height: 100vh;\n  width: fit-content;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: 100px;\n  padding-bottom: 50px;\n`;\n\nconst Boards = styled.div`\n  display: flex;\n  min-width: 100vw;\n  justify-content: flex-start;\n  align-items: flex-start;\n  padding: 0 20px;\n  gap: 20px;\n  position: relative;\n`;\n\nconst Trash = styled.div<{ isDraggingOver: boolean }>`\n  margin-top: 50px;\n  width: 300px;\n  display: flex;\n  justify-content: center;\n  svg {\n    color: ${(props) =>\n      props.isDraggingOver ? \"white\" : \"rgba(0, 0, 0, 0.3)\"};\n  }\n`;\n\nconst Svg = styled.svg`\n  width: 50px;\n  height: 50px;\n`;\n\nfunction App() {\n  const [todoBoards, setTodoBoards] = useRecoilState(todosState);\n  const [boards, setBoards] = useRecoilState(boardState);\n\n  function onDragEnd({ source, destination, type }: DropResult) {\n    if (!destination) {\n      return;\n    }\n    if (type === \"board\") {\n      if (destination.droppableId === \"trash\") {\n        setTodoBoards((prevBoards) => {\n          const copiedBoards = { ...prevBoards };\n          delete copiedBoards[boards[source.index]];\n          return copiedBoards;\n        });\n        setBoards((prev) => {\n          return prev.filter((board) => board !== prev[source.index]);\n        });\n      } else {\n        setBoards((boards) => {\n          const copiedBoards = [...boards];\n          const movedBoard = copiedBoards.splice(source.index, 1);\n          copiedBoards.splice(destination.index, 0, movedBoard[0]);\n          return copiedBoards;\n        });\n      }\n    } else {\n      if (source.droppableId === destination?.droppableId) {\n        setTodoBoards((allBoards) => {\n          const copiedBoard = [...allBoards[source.droppableId]];\n          const targetTodo = copiedBoard.splice(source.index, 1);\n          copiedBoard.splice(destination.index, 0, targetTodo[0]);\n          return {\n            ...allBoards,\n            [source.droppableId]: copiedBoard,\n          };\n        });\n      } else {\n        setTodoBoards((allBoards) => {\n          const fromBoard = [...allBoards[source.droppableId]];\n          const toBoard = [...allBoards[destination.droppableId]];\n          const targetTodo = fromBoard.splice(source.index, 1);\n          toBoard.splice(destination?.index, 0, targetTodo[0]);\n          return {\n            ...allBoards,\n            [source.droppableId]: fromBoard,\n            [destination.droppableId]: toBoard,\n          };\n        });\n      }\n    }\n  }\n\n  useEffect(() => {\n    localStorage.setItem(\"todoBoards\", JSON.stringify(todoBoards));\n  }, [todoBoards]);\n\n  useEffect(() => {\n    localStorage.setItem(\"boards\", JSON.stringify(boards));\n  }, [boards]);\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Container>\n        <CategorySelector />\n        <Droppable droppableId=\"boards\" direction=\"horizontal\" type=\"board\">\n          {(provided, info) => {\n            return (\n              <Boards ref={provided.innerRef} {...provided.droppableProps}>\n                {boards.map((boardId, index) => (\n                  <Board\n                    boardId={boardId}\n                    todos={todoBoards[boardId]}\n                    key={boardId}\n                    index={index}\n                  />\n                ))}\n                {provided.placeholder}\n              </Boards>\n            );\n          }}\n        </Droppable>\n        <Droppable droppableId=\"trash\" type=\"board\">\n          {(provided, info) => {\n            return (\n              <Trash\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                isDraggingOver={info.isDraggingOver}\n              >\n                <Svg\n                  aria-hidden=\"true\"\n                  focusable=\"false\"\n                  data-prefix=\"fas\"\n                  data-icon=\"trash\"\n                  role=\"img\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 448 512\"\n                  className=\"svg-inline--fa fa-trash fa-w-14 fa-3x\"\n                >\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zM53.2 467a48 48 0 0 0 47.9 45h245.8a48 48 0 0 0 47.9-45L416 128H32z\"\n                  ></path>\n                </Svg>\n                <div style={{ display: \"none\" }}>{provided.placeholder}</div>\n              </Trash>\n            );\n          }}\n        </Droppable>\n      </Container>\n    </DragDropContext>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport { darkTheme } from \"./theme\";\nimport { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  background-color:${(props) => props.theme.purple};\n  color:black;\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"white\",\r\n  boardColor: \"skyblue\",\r\n  cardColor: \"skyblue\",\r\n  orange: \"#ff6647\",\r\n  pink: \"#feb3d4\",\r\n  blue: \"#0657ef\",\r\n  yellow: \"#f1e761\",\r\n  white: \"#fffdff\",\r\n  green: \"#1e887e\",\r\n  purple: \"#421ad2\",\r\n};\r\n"],"sourceRoot":""}